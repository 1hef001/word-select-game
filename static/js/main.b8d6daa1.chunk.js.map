{"version":3,"sources":["components/Buttons.js","components/WordTable.js","components/Game.js","components/Modal.js","components/BackDrop.js","components/Timer.js","App.js","serviceWorker.js","index.js","components/logo.png"],"names":["Buttons","state","letters","selectedLetters","Set","onLetterClickHandler","event","letter","target","value","index","parseInt","name","setState","st","add","props","setSelectedHandler","generateButtons","jumbledWord","map","className","key","onClick","disabled","has","backSpaceHandler","backSpace","pop","onClearHandler","setUnderscores","jumbleAgain","clear","jumbleWord","selectedWord","forEach","componentDidMount","Object","keys","this","length","onCheckHandler","bind","Component","WordTable","classifyLength","elements","usedWords","el","push","values","word","Game","toLowerCase","split","shuffleArray","getRandomInt","max","Math","floor","random","selectWord","wordLength","filteredWords","data","filter","validWords","array","i","j","x","findIndex","us","error","userWord","join","len","score","setScore","options","style","height","width","paddingTop","alt","src","logo","class","Modal","children","BackDrop","onclick","Timer","autoStart","onTick","setTimeHandler","date","Date","now","seconds","onComplete","onTimerEndHandler","renderer","hours","minutes","completed","particlesOptions","particles","number","density","enable","value_area","App","key1","showModal","level","scoreToBeat","rerenderGame","onContinueHandler","displayModal","total","params","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message","module","exports"],"mappings":"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","file":"static/js/main.b8d6daa1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport class Buttons extends Component {\r\n\t// selectedLetters is a set of indices\r\n\tstate = { letters: {}, selectedLetters: new Set() };\r\n\r\n\t/** Letter select handler */\r\n\tonLetterClickHandler = (event) => {\r\n\t\tlet letter = event.target.value;\r\n\t\tlet index = parseInt(event.target.name);\r\n\t\t// we got the letter that was selected\r\n\r\n\t\tthis.setState((st) => ({\r\n\t\t\tselectedLetters: st.selectedLetters.add(index),\r\n\t\t}));\r\n\r\n\t\t// set the state in game\r\n\t\tthis.props.setSelectedHandler(letter);\r\n\t};\r\n\r\n\t/** Generates button for each letter in the word  */\r\n\tgenerateButtons = () => {\r\n\t\treturn this.props.jumbledWord.map((letter, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<div className='flex mb-4'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName='center inline-flex bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border border-gray-400 rounded shadow '\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tvalue={letter}\r\n\t\t\t\t\t\tname={index}\r\n\t\t\t\t\t\tonClick={this.onLetterClickHandler}\r\n\t\t\t\t\t\tdisabled={this.state.selectedLetters.has(index)}>\r\n\t\t\t\t\t\t{letter}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t});\r\n\t};\r\n\r\n\t/** function to remove the last entered letter\r\n\t *\r\n\t * 2 functions:\r\n\t * - remove the last letter and replace with _\r\n\t * - enable the letter back - remove from selectedLetters\r\n\t */\r\n\tbackSpaceHandler = () => {\r\n\t\tthis.props.backSpace();\r\n\t\tthis.setState((st) => {\r\n\t\t\tlet selectedLetters = [...st.selectedLetters];\r\n\t\t\tselectedLetters.pop();\r\n\t\t\tselectedLetters = new Set(selectedLetters);\r\n\t\t\treturn { ...st, selectedLetters };\r\n\t\t});\r\n\t};\r\n\r\n\t/** function to clear the user's input */\r\n\tonClearHandler = () => {\r\n\t\tthis.setState({ selectedLetters: new Set() });\r\n\t\tthis.props.setUnderscores();\r\n\t};\r\n\r\n\t/** jumble the selected word\r\n\t * @param {Boolean} clear - clear the input or not\r\n\t */\r\n\tjumbleAgain = (clear = false) => {\r\n\t\tthis.props.jumbleWord(this.props.selectedWord);\r\n\t\tlet letters = {};\r\n\t\tthis.props.jumbledWord.forEach((letter, index) => {\r\n\t\t\tletters[index] = letter;\r\n\t\t});\r\n\r\n\t\tif (clear) this.onClearHandler();\r\n\r\n\t\tthis.setState({ letters });\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.jumbleAgain();\r\n\t};\r\n\r\n\trender() {\r\n\t\tif (Object.keys(this.state.letters).length === 0) {\r\n\t\t\tlet letters = {};\r\n\t\t\tthis.props.jumbledWord.forEach((letter, index) => {\r\n\t\t\t\tletters[index] = letter;\r\n\t\t\t});\r\n\t\t\tthis.setState({ letters });\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className='flex flex-wrap center'>\r\n\t\t\t\t\t{this.generateButtons()}\r\n\t\t\t\t</div>\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='center bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded'\r\n\t\t\t\t\tonClick={this.backSpaceHandler}>\r\n\t\t\t\t\tBackspace\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='center bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded'\r\n\t\t\t\t\tonClick={this.onClearHandler}>\r\n\t\t\t\t\tClear\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tclassName='center bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded'\r\n\t\t\t\t\tonClick={this.props.onCheckHandler.bind(\r\n\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\tthis.onClearHandler\r\n\t\t\t\t\t)}>\r\n\t\t\t\t\tCheck\r\n\t\t\t\t</button>\r\n\t\t\t\t<button\r\n\t\t\t\t\tonClick={this.jumbleAgain.bind(this, true)}\r\n\t\t\t\t\tclassName='center bg-transparent hover:bg-blue-500 text-blue-700 font-semibold hover:text-white py-2 px-4 border border-blue-500 hover:border-transparent rounded'>\r\n\t\t\t\t\tJumble Again\r\n\t\t\t\t</button>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Buttons;\r\n","import React, { Component } from 'react';\r\nimport '../styles/WordTable.css'\r\n\r\nexport class WordTable extends Component {\r\n\t/** classify the words according to length and display\r\n\t * @returns {JSX.Element} - returns JSX markup\r\n\t */\r\n\tclassifyLength = () => {\r\n\t\tlet elements = {};\r\n\r\n\t\tthis.props.usedWords.forEach((el, index) => {\r\n\t\t\tlet length = el.length;\r\n\t\t\t// we have the length\r\n\t\t\t// elements[length] = [];\r\n\t\t\tif (elements[length]) {\r\n\t\t\t\telements[length].push(el);\r\n\t\t\t} else {\r\n\t\t\t\telements[length] = [];\r\n\t\t\t\telements[length].push(el);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"table center flex\">\r\n\t\t\t\t{Object.values(elements).map((el, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className=\"tracking-wide p-1 relative\">\r\n\t\t\t\t\t\t\t<h2>{el[0].length} letter words </h2>\r\n\t\t\t\t\t\t\t{el.map((word) => {\r\n\t\t\t\t\t\t\t\treturn <div className=\"\" key={index}>{word}</div>;\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1>Your words : </h1>\r\n\t\t\t\t{this.classifyLength()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default WordTable;\r\n","import React, { Component } from 'react';\r\nimport Buttons from './Buttons';\r\nimport WordTable from './WordTable';\r\nimport Tilt from 'react-tilt';\r\nimport logo from './logo.png';\r\nimport '../styles/Game.css';\r\nimport data from './dummyData.json';\r\n\r\nexport class Game extends Component {\r\n\t/** Jumble a given word\r\n\t * @param  {String} word - input word for scrambling\r\n\t */\r\n\tjumbleWord = (word) => {\r\n\t\tword = word.toLowerCase();\r\n\t\t// word is now orange\r\n\t\tword = word.split('');\r\n\t\tthis.shuffleArray(word);\r\n\t\tthis.setState({ jumbledWord: word }, function () {\r\n\t\t\tthis.setUnderscores();\r\n\t\t});\r\n\t};\r\n\r\n\t// state\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tselectedWord: null,\r\n\t\t\tjumbledWord: [],\r\n\t\t\tvalidWords: new Set(),\r\n\t\t\tusedWords: new Set(),\r\n\t\t\tselectedLetters: [],\r\n\t\t\terror: null,\r\n\t\t};\r\n\t}\r\n\r\n\t/** generate random number between 0 and max value\r\n\t *  - 0 is inclusive\r\n\t * - max is exclusive\r\n\t * @param {Number} max - upper limit\r\n\t */\r\n\tgetRandomInt = (max) => {\r\n\t\treturn Math.floor(Math.random() * Math.floor(max));\r\n\t};\r\n\r\n\t/** Select a word of the given letter count from the given api at the start of the game\r\n\t * @param {Number} wordLength - the required word length\r\n\t */\r\n\tselectWord = (wordLength) => {\r\n\t\t// take the size of the word to choose as a param\r\n\t\t// current word is hardcoded to ORANGE\r\n\r\n\t\tlet filteredWords = Object.keys(data).filter(\r\n\t\t\t(word) => word.length === wordLength\r\n\t\t);\r\n\r\n\t\t// filteredWords is all 6 letter words eg => [\"orange\", \"mobile\"]\r\n\t\t// pick one word from here\r\n\t\tlet idx = this.getRandomInt(filteredWords.length);\r\n\r\n\t\tlet selectedWord = filteredWords[idx];\r\n\r\n\t\tlet validWords = data[selectedWord];\r\n\r\n\t\tthis.setState({\r\n\t\t\tvalidWords: new Set(validWords),\r\n\t\t\tselectedWord,\r\n\t\t});\r\n\t};\r\n\r\n\t/** Randomize array in-place using Durstenfeld shuffle algorithm\r\n\t * @param {Array} array\r\n\t */\r\n\tshuffleArray = (array) => {\r\n\t\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\r\n\t\t}\r\n\t};\r\n\r\n\t/** push the letter to the selectedLetters array in state  */\r\n\tsetSelectedHandler = (letter) => {\r\n\t\tthis.setState((st) => {\r\n\t\t\t// ['_', '_', '_', '_'];\r\n\t\t\tlet selectedLetters = [...st.selectedLetters];\r\n\t\t\tlet x = selectedLetters.findIndex((el) => el === '_');\r\n\t\t\tselectedLetters[x] = letter;\r\n\t\t\treturn { ...st, selectedLetters };\r\n\t\t});\r\n\t};\r\n\r\n\t/** Set the underscores in selectedLetters initially */\r\n\tsetUnderscores = () => {\r\n\t\tlet us = '';\r\n\t\tthis.state.jumbledWord.forEach((el) => {\r\n\t\t\tus += '_';\r\n\t\t});\r\n\t\tthis.setState({ selectedLetters: us.split(''), error: null });\r\n\t};\r\n\r\n\t/** helper function to remove the last entered letter in selectedLetters */\r\n\tbackSpace = () => {\r\n\t\tthis.setState((st) => {\r\n\t\t\tlet selectedLetters = [...st.selectedLetters];\r\n\t\t\tlet x = selectedLetters.findIndex((el) => el === '_');\r\n\t\t\tif (x === -1) {\r\n\t\t\t\tlet lastIndex = selectedLetters.length - 1;\r\n\t\t\t\tselectedLetters[lastIndex] = '_';\r\n\t\t\t} else {\r\n\t\t\t\tselectedLetters[x - 1] = '_';\r\n\t\t\t}\r\n\t\t\treturn { ...st, selectedLetters, error: null };\r\n\t\t});\r\n\t};\r\n\r\n\t/** Check if the userWord is a valid word and add score\r\n\t * @param {Function} onClearHandler - function used to clear the input\r\n\t */\r\n\tonCheckHandler = (onClearHandler) => {\r\n\t\tlet userWord = this.state.selectedLetters.join('').split('_')[0];\r\n\t\tif (userWord.length <= 2) {\r\n\t\t\treturn this.setState({ error: \"Two letter words don't count\" });\r\n\t\t}\r\n\t\tuserWord = userWord.toLowerCase();\r\n\t\tif (\r\n\t\t\tthis.state.validWords.has(userWord) &&\r\n\t\t\t!this.state.usedWords.has(userWord)\r\n\t\t) {\r\n\t\t\t// set score\r\n\t\t\t// set errors to null\r\n\t\t\t// clear the input\r\n\t\t\t// add the word to the usedWords array\r\n\t\t\tthis.setState((st) => {\r\n\t\t\t\tlet len = userWord.length;\r\n\t\t\t\tlet score = this.props.score;\r\n\t\t\t\tif (len === 3) score += 5;\r\n\t\t\t\tif (len === 4) score += 10;\r\n\t\t\t\tif (len === 5) score += 20;\r\n\t\t\t\tif (len === 6) score += 50;\r\n\t\t\t\tif (len === 7) score += 75;\r\n\t\t\t\tif (len === 8) score += 100;\r\n\t\t\t\tif (len === 9) score += 150;\r\n\t\t\t\tif (len === 10) score += 200;\r\n\t\t\t\tlet usedWords = new Set(st.usedWords);\r\n\t\t\t\tusedWords.add(userWord);\r\n\t\t\t\tonClearHandler();\r\n\t\t\t\tthis.props.setScore(score);\r\n\t\t\t\treturn { ...st, error: null, usedWords };\r\n\t\t\t});\r\n\t\t} else if (this.state.usedWords.has(userWord)) {\r\n\t\t\tthis.setState({ error: 'We have been through this before' });\r\n\t\t} else {\r\n\t\t\tthis.setState({ error: 'Thats not english' });\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.selectWord(this.props.wordLength);\r\n\t\t// jumble the selected word\r\n\t\t// this.jumbleWord(this.state.selectedWord);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<header className='flex text-center text-2xl'>\r\n\t\t\t\t\t<Tilt\r\n\t\t\t\t\t\tclassName='inline-flex pl-4 Tilt br2 shadow-2'\r\n\t\t\t\t\t\toptions={{ max: 55 }}\r\n\t\t\t\t\t\tstyle={{ height: 150, width: 150 }}>\r\n\t\t\t\t\t\t<div className='Tilt-inner pa3'>\r\n\t\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\t\tstyle={{ paddingTop: '5px' }}\r\n\t\t\t\t\t\t\t\talt='logo'\r\n\t\t\t\t\t\t\t\tsrc={logo}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Tilt>\r\n\t\t\t\t\t<h1 className='head1 center inline-flex text-white-400 '>\r\n\t\t\t\t\t\tWord Game\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t<div class='box transition container clearfix mx-auto border-2 rounded-none'>\r\n\t\t\t\t\t<h1 className='text-right'>SCORE : {this.props.score}</h1>\r\n\t\t\t\t\t<h2 className='text-center'>\r\n\t\t\t\t\t\t{this.state.jumbledWord.join('')}\r\n\t\t\t\t\t</h2>\r\n\t\t\t\t\t<h1 className='center tracking-widest'>\r\n\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t{this.state.selectedLetters}{' '}\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t\t{this.state.selectedWord ? (\r\n\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\tclassName='center'\r\n\t\t\t\t\t\t\tsetSelectedHandler={this.setSelectedHandler}\r\n\t\t\t\t\t\t\tjumbledWord={this.state.jumbledWord}\r\n\t\t\t\t\t\t\tjumbleWord={this.jumbleWord}\r\n\t\t\t\t\t\t\tselectedWord={this.state.selectedWord}\r\n\t\t\t\t\t\t\tbackSpace={this.backSpace}\r\n\t\t\t\t\t\t\tsetUnderscores={this.setUnderscores}\r\n\t\t\t\t\t\t\tonCheckHandler={this.onCheckHandler}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t) : null}\r\n\r\n\t\t\t\t\t{this.state.error ? <p>{this.state.error}</p> : null}\r\n\r\n\t\t\t\t\t<WordTable usedWords={[...this.state.usedWords]} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\r\nimport '../styles/Modal.css';\r\n\r\nexport class Modal extends Component {\r\n\trender() {\r\n\t\treturn <div className='Modal'>{this.props.children}</div>;\r\n\t}\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\r\n\r\nimport '../styles/BackDrop.css';\r\n\r\nexport class BackDrop extends Component {\r\n\trender() {\r\n\t\treturn <div onClick={this.props.onclick} className='BackDrop'></div>;\r\n\t}\r\n}\r\n\r\nexport default BackDrop;\r\n","import React, { Component } from 'react';\r\nimport Countdown from 'react-countdown';\r\n\r\nexport class Timer extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Countdown\r\n\t\t\t\t\tautoStart={true}\r\n\t\t\t\t\tonTick={this.props.setTimeHandler}\r\n\t\t\t\t\tdate={Date.now() + this.props.seconds}\r\n\t\t\t\t\tonComplete={this.props.onTimerEndHandler}\r\n\t\t\t\t\trenderer={({ hours, minutes, seconds, completed }) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t0{minutes} : {seconds}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport Game from './components/Game';\r\nimport Modal from './components/Modal';\r\nimport BackDrop from './components/BackDrop';\r\nimport Timer from './components/Timer';\r\nimport Particles from 'react-particles-js';\r\nimport './App.css';\r\n\r\nconst particlesOptions = {\r\n\tparticles: {\r\n\t\tnumber: {\r\n\t\t\tvalue: 30,\r\n\t\t\tdensity: {\r\n\t\t\t\tenable: true,\r\n\t\t\t\tvalue_area: 800,\r\n\t\t\t},\r\n\t\t},\r\n\t},\r\n};\r\n\r\nexport class App extends Component {\r\n\tstate = {\r\n\t\tscore: 0,\r\n\t\tkey: 1,\r\n\t\tseconds: 120000,\r\n\t\tkey1: 0,\r\n\t\tshowModal: false,\r\n\t\tlevel: 1,\r\n\t\twordLength: 6,\r\n\t\tscoreToBeat: 100,\r\n\t};\r\n\r\n\t/** Set the score state in the app component\r\n\t * @param {Number} score - score to add to the state\r\n\t */\r\n\tsetScore = (score) => {\r\n\t\tthis.setState({ score });\r\n\t};\r\n\r\n\t/** Rerender the game screen to rerender the timer and move to the next level */\r\n\trerenderGame = () => {\r\n\t\tthis.setState((st) => {\r\n\t\t\treturn {\r\n\t\t\t\t...st,\r\n\t\t\t\tkey: st.key++,\r\n\t\t\t\tseconds: 120000,\r\n\t\t\t\tkey1: st.key1++,\r\n\t\t\t\tlevel: st.level++,\r\n\t\t\t\tscoreToBeat: st.scoreToBeat + 50,\r\n\t\t\t\twordLength: st.wordLength++,\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\t/** Function to remove the modal and start a new game */\r\n\tonContinueHandler = () => {\r\n\t\tthis.setState((st) => {\r\n\t\t\treturn {\r\n\t\t\t\t...st,\r\n\t\t\t\tkey: st.key++,\r\n\t\t\t\tscore: 0,\r\n\t\t\t\tshowModal: false,\r\n\t\t\t\tseconds: 120000,\r\n\t\t\t\tkey1: st.key1++,\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tscoreToBeat: 100,\r\n\t\t\t\twordLength: 6,\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\t/** display the game over modal */\r\n\tdisplayModal = () => {\r\n\t\tconst gameoverString = 'GAME OVER';\r\n\t\tif (this.state.showModal) {\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Modal className=''>\r\n\t\t\t\t\t\t<h4>{gameoverString}</h4>\r\n\t\t\t\t\t\t<button onClick={this.onContinueHandler}>\r\n\t\t\t\t\t\t\tContinue\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</Modal>\r\n\t\t\t\t\t<BackDrop onclick={this.onContinueHandler} />\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\t/** Function that checks score and moves to next stage when timer ends */\r\n\tonTimerEndHandler = () => {\r\n\t\t// check if the score is > 100\r\n\t\tif (this.state.score >= this.state.scoreToBeat) {\r\n\t\t\t// keep current score and move on to next level\r\n\t\t\tthis.rerenderGame();\r\n\t\t} else {\r\n\t\t\t// show new game screen\r\n\t\t\tthis.setState({ showModal: true });\r\n\t\t}\r\n\t};\r\n\r\n\t/** maintain the time in local state.\r\n\t *  Called on each tick */\r\n\tsetTimeHandler = (data) => {\r\n\t\t// data.seconds\r\n\t\tthis.setState((st) => {\r\n\t\t\treturn {\r\n\t\t\t\tseconds: data.total,\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className='text-right'>\r\n\t\t\t\t\tTimer:\r\n\t\t\t\t\t<Timer\r\n\t\t\t\t\t\tclassName='cover-right'\r\n\t\t\t\t\t\tkey={this.state.key1}\r\n\t\t\t\t\t\tseconds={this.state.seconds}\r\n\t\t\t\t\t\tonTimerEndHandler={this.onTimerEndHandler}\r\n\t\t\t\t\t\tsetTimeHandler={this.setTimeHandler}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<Game\r\n\t\t\t\t\tlevel={this.state.level}\r\n\t\t\t\t\twordLength={this.state.wordLength}\r\n\t\t\t\t\tkey={this.state.key}\r\n\t\t\t\t\trerenderGame={this.rerenderGame}\r\n\t\t\t\t\tscore={this.state.score}\r\n\t\t\t\t\tsetScore={this.setScore}\r\n\t\t\t\t\tonContinueHandler={this.onContinueHandler}\r\n\t\t\t\t\tscoreToBeat={this.state.scoreToBeat}\r\n\t\t\t\t/>\r\n\t\t\t\t<Particles\r\n\t\t\t\t\tclassName='particles'\r\n\t\t\t\t\tparams={{ particlesOptions }}\r\n\t\t\t\t/>\r\n\t\t\t\t{this.displayModal()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.bc47f899.png\";"],"sourceRoot":""}