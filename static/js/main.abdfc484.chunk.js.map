{"version":3,"sources":["components/Buttons.js","components/WordTable.js","components/Game.js","components/Modal.js","components/BackDrop.js","components/Timer.js","App.js","serviceWorker.js","index.js"],"names":["Buttons","state","letters","selectedLetters","Set","usedLetterCounts","ds","onLetterHelper","letter","index","setState","st","add","x","i","indexOf","toString","splice","console","log","newdata","j","props","setSelectedHandler","onLetterClickHandler","event","target","value","parseInt","name","generateButtons","jumbledWord","map","classes","has","className","key","onClick","disabled","toUpperCase","backSpaceHandler","backSpace","pop","undefined","cpyulc","push","onClearHandler","setUnderscores","setDs","err","jumbleAgain","clear","jumbleWord","selectedWord","forEach","onKeyboardHandler","keyCode","String","fromCharCode","toLowerCase","Object","keys","includes","letterCounts","letterarray","onCheckHandler","componentDidMount","this","length","spellCheck","autoFocus","onKeyDown","join","bind","Component","WordTable","classifyLength","elements","usedWords","el","values","word","Game","wordStr","func","split","shuffleArray","count","getRandomInt","max","Math","floor","random","selectWord","wordLength","filteredWords","data","filter","validWords","getData","array","findIndex","componentDidUpdate","seconds","setUsedWords","us","error","callback","userWord","len","score","setScore","Modal","style","backgroundColor","children","BackDrop","onclick","Timer","autoStart","onTick","setTimeHandler","date","Date","now","onComplete","onTimerEndHandler","renderer","hours","minutes","completed","App","key1","showModal","level","scoreToBeat","rerenderGame","onContinueHandler","displayModal","words","sort","a","b","slice","id","total","colour","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.abdfc484.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/buttons.css';\r\nimport '../styles/app.css';\r\n\r\nexport class Buttons extends Component {\r\n\t// selectedLetters is a set of indices\r\n\tstate = {\r\n\t\tletters: {},\r\n\t\tselectedLetters: new Set(),\r\n\t\tusedLetterCounts: {},\r\n\t\tds: {},\r\n\t};\r\n\r\n\t/** helper function to update state\r\n\t * @param {String} letter - current letter\r\n\t * @param {Number} index - index of the letter in the jumbled word\r\n\t */\r\n\tonLetterHelper = (letter, index) => {\r\n\t\tthis.setState(\r\n\t\t\t(st) => {\r\n\t\t\t\tlet usedLetterCounts = { ...st.usedLetterCounts };\r\n\t\t\t\tusedLetterCounts[letter] = st.usedLetterCounts[letter] + 1;\r\n\r\n\t\t\t\tlet selectedLetters = new Set(st.selectedLetters);\r\n\t\t\t\tselectedLetters.add(index);\r\n\r\n\t\t\t\tlet x = [...st.ds[letter]];\r\n\r\n\t\t\t\tconst i = x.indexOf(toString(index));\r\n\r\n\t\t\t\tx.splice(i, 1);\r\n\r\n\t\t\t\tconsole.log(x);\r\n\r\n\t\t\t\tlet newdata = {};\r\n\t\t\t\tfor (let j in st.ds) {\r\n\t\t\t\t\tif (j == letter) {\r\n\t\t\t\t\t\tnewdata[letter] = [...x];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewdata[j] = [...st.ds[j]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...st,\r\n\t\t\t\t\tselectedLetters,\r\n\t\t\t\t\tusedLetterCounts,\r\n\t\t\t\t\tds: newdata,\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tconsole.log('i ransjkdn');\r\n\t\t\t\tthis.props.setSelectedHandler(letter);\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// set the state in game\r\n\t};\r\n\r\n\t/** Letter select handler */\r\n\tonLetterClickHandler = (event) => {\r\n\t\tlet letter = event.target.value;\r\n\t\tlet index = parseInt(event.target.name);\r\n\t\t// we got the letter that was selected\r\n\t\tthis.onLetterHelper(letter, index);\r\n\t\t// we have the count in props.letterCounts\r\n\t};\r\n\r\n\t/** Generates button for each letter in the word  */\r\n\tgenerateButtons = () => {\r\n\t\treturn this.props.jumbledWord.map((letter, index) => {\r\n\t\t\tlet classes =\r\n\t\t\t\t' border-2 border-blue-700 w-16  m-2  p-4 rounded hover:bg-blue-700 hover:border-black ';\r\n\t\t\tif (this.state.selectedLetters.has(index)) {\r\n\t\t\t\tclasses += '  bg-gray-500 text-gray-300';\r\n\t\t\t}\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName={classes}\r\n\t\t\t\t\t\t// className='inline-flex bg-white hover:bg-gray-100 text-gray-800 font-semibold py-2 px-4 border hover:border-gray-400 rounded shadow '\r\n\t\t\t\t\t\tkey={index}\r\n\t\t\t\t\t\tvalue={letter}\r\n\t\t\t\t\t\tname={index}\r\n\t\t\t\t\t\tonClick={this.onLetterClickHandler}\r\n\t\t\t\t\t\tdisabled={this.state.selectedLetters.has(index)}>\r\n\t\t\t\t\t\t{letter.toUpperCase()}\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t});\r\n\t};\r\n\r\n\t/** function to remove the last entered letter\r\n\t *\r\n\t * 2 functions:\r\n\t * - remove the last letter and replace with _\r\n\t * - enable the letter back - remove from selectedLetters\r\n\t */\r\n\tbackSpaceHandler = () => {\r\n\t\tthis.props.backSpace(() => {\r\n\t\t\tthis.setState((st) => {\r\n\t\t\t\tlet selectedLetters = [...st.selectedLetters];\r\n\t\t\t\tlet index = selectedLetters.pop();\r\n\t\t\t\tconsole.log('idx : ', index);\r\n\t\t\t\tif (index === null || index === undefined) {\r\n\t\t\t\t\tconsole.log('qweqweqwe');\r\n\t\t\t\t\treturn { ...st };\r\n\t\t\t\t}\r\n\r\n\t\t\t\tlet letter = st.letters[index];\r\n\r\n\t\t\t\tlet cpyulc = { ...st.usedLetterCounts };\r\n\t\t\t\tcpyulc[letter] = st.usedLetterCounts[letter] - 1;\r\n\r\n\t\t\t\tconsole.log(st.ds[letter]);\r\n\t\t\t\tlet x = [...st.ds[letter]];\r\n\t\t\t\tx.push(index.toString());\r\n\t\t\t\tconsole.log('x : ', x);\r\n\r\n\t\t\t\tlet newdata = {};\r\n\t\t\t\tfor (let j in st.ds) {\r\n\t\t\t\t\tif (j == letter) {\r\n\t\t\t\t\t\tnewdata[letter] = [...x];\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tnewdata[j] = [...st.ds[j]];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconsole.log(newdata);\r\n\r\n\t\t\t\tselectedLetters = new Set(selectedLetters);\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\t...st,\r\n\t\t\t\t\tselectedLetters,\r\n\t\t\t\t\tds: newdata,\r\n\t\t\t\t\tusedLetterCounts: cpyulc,\r\n\t\t\t\t};\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/** function to clear the user's input */\r\n\tonClearHandler = () => {\r\n\t\tthis.setState({ selectedLetters: new Set() });\r\n\t\tthis.props.setUnderscores();\r\n\r\n\t\t// have to do some stuff\r\n\t\t// update usedLetterCounts\r\n\r\n\t\tthis.setState(\r\n\t\t\t(st) => {\r\n\t\t\t\tlet usedLetterCounts = {};\r\n\t\t\t\tfor (let i in st.usedLetterCounts) {\r\n\t\t\t\t\tconsole.log(i);\r\n\t\t\t\t\tusedLetterCounts[i] = 0;\r\n\t\t\t\t}\r\n\t\t\t\treturn {\r\n\t\t\t\t\tusedLetterCounts,\r\n\t\t\t\t};\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tthis.setDs();\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\t/** sets the ds state at the start of the game */\r\n\tsetDs = () => {\r\n\t\tlet ds = {};\r\n\t\tfor (let i in this.state.letters) {\r\n\t\t\tlet letter = this.state.letters[i];\r\n\t\t\ttry {\r\n\t\t\t\tds[letter].push(i);\r\n\t\t\t} catch (err) {\r\n\t\t\t\tds[letter] = [];\r\n\t\t\t\tds[letter].push(i);\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.setState({ ds: ds });\r\n\t};\r\n\r\n\t/** jumble the selected word\r\n\t * @param {Boolean} clear - clear the input or not\r\n\t */\r\n\tjumbleAgain = (clear = false) => {\r\n\t\tthis.props.jumbleWord(this.props.selectedWord, (jumbledWord) => {\r\n\t\t\tlet letters = {};\r\n\t\t\tjumbledWord.forEach((letter, index) => {\r\n\t\t\t\tletters[index] = letter;\r\n\t\t\t});\r\n\r\n\t\t\tif (clear) this.onClearHandler();\r\n\r\n\t\t\tthis.setState({ letters }, () => {\r\n\t\t\t\tthis.setDs();\r\n\t\t\t});\r\n\t\t});\r\n\t};\r\n\r\n\t/** Handles the onKeyDown event */\r\n\tonKeyboardHandler = (event) => {\r\n\t\tconsole.log(event.keyCode);\r\n\r\n\t\t// backspace\r\n\t\tif (event.keyCode === 8) {\r\n\t\t\tthis.backSpaceHandler();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tif (event.keyCode === 13) {\r\n\t\t\tthis.props.onCheckHandler(this.onClearHandler);\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet letter = String.fromCharCode(event.keyCode);\r\n\t\tletter = letter.toLowerCase();\r\n\t\t// we have the letter now\r\n\t\tif (Object.keys(this.state.usedLetterCounts).includes(letter)) {\r\n\t\t\tlet count = this.state.usedLetterCounts[letter];\r\n\r\n\t\t\tif (count < this.props.letterCounts[letter]) {\r\n\t\t\t\tthis.setState((st) => {\r\n\t\t\t\t\tlet letterarray = [...st.ds[letter]];\r\n\t\t\t\t\tlet index = parseInt(letterarray.pop());\r\n\r\n\t\t\t\t\tthis.onLetterHelper(letter, index);\r\n\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...st,\r\n\t\t\t\t\t};\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.jumbleAgain();\r\n\t\tthis.setDs();\r\n\t};\r\n\r\n\trender() {\r\n\t\tif (Object.keys(this.state.letters).length === 0) {\r\n\t\t\tlet x = {};\r\n\t\t\tObject.keys(this.props.letterCounts).forEach((letter) => {\r\n\t\t\t\tx[letter] = 0;\r\n\t\t\t});\r\n\r\n\t\t\tlet letters = {};\r\n\t\t\tthis.props.jumbledWord.forEach((letter, index) => {\r\n\t\t\t\tletters[index] = letter;\r\n\t\t\t});\r\n\t\t\tthis.setState({ letters, usedLetterCounts: x }, () => {\r\n\t\t\t\tthis.setDs();\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<div className='flex justify-center p-6  '>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tspellCheck={false}\r\n\t\t\t\t\t\tclassName=' sm:text-4xl  jumbled-words text-lg  '\r\n\t\t\t\t\t\tautoFocus\r\n\t\t\t\t\t\tonKeyDown={this.onKeyboardHandler}\r\n\t\t\t\t\t\tvalue={this.props.selectedLetters\r\n\t\t\t\t\t\t\t.join('')\r\n\t\t\t\t\t\t\t.toUpperCase()}\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className='flex  justify-center px-16 pt-5 flex-wrap '>\r\n\t\t\t\t\t{this.generateButtons()}\r\n\t\t\t\t</div>\r\n\t\t\t\t<br />\r\n\t\t\t\t<br />\r\n\t\t\t\t<div\r\n\t\t\t\t\t// className=' max-w-6xl '\r\n\t\t\t\t\tclassName='grid button-grid gap-4 '>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName='   border-2 border-blue-700  p-4 rounded px-6 hover:bg-blue-700 hover:border-black '\r\n\t\t\t\t\t\tonClick={this.backSpaceHandler}>\r\n\t\t\t\t\t\tBackspace\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=' border-2 border-blue-700  p-4 rounded px-6 hover:bg-blue-700 hover:border-black '\r\n\t\t\t\t\t\tonClick={this.onClearHandler}>\r\n\t\t\t\t\t\tClear\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=' border-2 border-blue-700  p-4 rounded px-6 hover:bg-blue-700 hover:border-black '\r\n\t\t\t\t\t\tonClick={this.props.onCheckHandler.bind(\r\n\t\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\t\tthis.onClearHandler\r\n\t\t\t\t\t\t)}>\r\n\t\t\t\t\t\tCheck\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tclassName=' border-2 border-blue-700  p-4 rounded px-6 hover:bg-blue-700 hover:border-black '\r\n\t\t\t\t\t\tonClick={this.jumbleAgain.bind(this, true)}>\r\n\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\tJumble Again\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Buttons;\r\n","import React, { Component } from 'react';\r\nimport '../styles/WordTable.css';\r\nimport '../styles/app.css';\r\n\r\nexport class WordTable extends Component {\r\n\t/** classify the words according to length and display\r\n\t * @returns {JSX.Element} - returns JSX markup\r\n\t */\r\n\tclassifyLength = () => {\r\n\t\tlet elements = {};\r\n\r\n\t\tthis.props.usedWords.forEach((el, index) => {\r\n\t\t\tlet length = el.length;\r\n\t\t\t// we have the length\r\n\t\t\t// elements[length] = [];\r\n\t\t\tif (elements[length]) {\r\n\t\t\t\telements[length].push(el);\r\n\t\t\t} else {\r\n\t\t\t\telements[length] = [];\r\n\t\t\t\telements[length].push(el);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName='grid table-grid'\r\n\t\t\t\t// className='table center flex'\r\n\t\t\t>\r\n\t\t\t\t{Object.values(elements).map((el, index) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<div className='tracking-wide p-1  '>\r\n\t\t\t\t\t\t\t<h2 className='font-medium'>\r\n\t\t\t\t\t\t\t\t{el[0].length} letter words{' '}\r\n\t\t\t\t\t\t\t</h2>\r\n\t\t\t\t\t\t\t{el.map((word) => {\r\n\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t<div\r\n\t\t\t\t\t\t\t\t\t\tclassName=' text-center pb-1 rounded-lg'\r\n\t\t\t\t\t\t\t\t\t\tkey={index}>\r\n\t\t\t\t\t\t\t\t\t\t{word}\r\n\t\t\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t);\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className='mt-5 text-lg '>\r\n\t\t\t\t<h1 className='   text-2xl flex justify-center'>Your Words</h1>\r\n\t\t\t\t{this.classifyLength()}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default WordTable;\r\n","import React, { Component } from 'react';\r\nimport Buttons from './Buttons';\r\nimport WordTable from './WordTable';\r\nimport '../styles/app.css';\r\nimport data from './semifinaldict.json';\r\nimport '../styles/Game.css';\r\n\r\nexport class Game extends Component {\r\n\t/** Jumble a given word\r\n\t * @param  {String} word - input word for scrambling\r\n\t * @param {Function} func - the callback function to call after setState\r\n\t */\r\n\tjumbleWord = (wordStr, func) => {\r\n\t\twordStr = wordStr.toLowerCase();\r\n\t\t// word is now orange\r\n\t\tlet word = wordStr.split('');\r\n\t\tthis.shuffleArray(word);\r\n\r\n\t\tlet letterCounts = {};\r\n\r\n\t\tfor (let i = 0; i < word.length; i++) {\r\n\t\t\t// we have the letter\r\n\t\t\tlet count = wordStr.split(wordStr[i]).length - 1;\r\n\t\t\tletterCounts[wordStr[i]] = count;\r\n\t\t}\r\n\r\n\t\tthis.setState({ jumbledWord: word, letterCounts }, function () {\r\n\t\t\tfunc(this.state.jumbledWord);\r\n\t\t\tthis.setUnderscores();\r\n\t\t});\r\n\t};\r\n\r\n\t// state\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tselectedWord: null,\r\n\t\t\tjumbledWord: [],\r\n\t\t\tvalidWords: new Set(),\r\n\t\t\tusedWords: new Set(),\r\n\t\t\tselectedLetters: [],\r\n\t\t\terror: null,\r\n\t\t\tletterCounts: {},\r\n\t\t};\r\n\t}\r\n\r\n\t/** generate random number between 0 and max value\r\n\t *  - 0 is inclusive\r\n\t * - max is exclusive\r\n\t * @param {Number} max - upper limit\r\n\t */\r\n\tgetRandomInt = (max) => {\r\n\t\treturn Math.floor(Math.random() * Math.floor(max));\r\n\t};\r\n\r\n\t/** Select a word of the given letter count from the given api at the start of the game\r\n\t * @param {Number} wordLength - the required word length\r\n\t */\r\n\tselectWord = (wordLength) => {\r\n\t\t// take the size of the word to choose as a param\r\n\r\n\t\tlet filteredWords = Object.keys(data).filter(\r\n\t\t\t(word) => word.length === wordLength\r\n\t\t);\r\n\r\n\t\t// filteredWords is all 6 letter words eg => [\"orange\", \"mobile\"]\r\n\t\t// pick one word from here\r\n\t\tlet idx = this.getRandomInt(filteredWords.length);\r\n\r\n\t\tlet selectedWord = filteredWords[idx];\r\n\r\n\t\tlet validWords = data[selectedWord];\r\n\r\n\t\tthis.setState(\r\n\t\t\t{\r\n\t\t\t\tvalidWords: new Set(validWords),\r\n\t\t\t\tselectedWord,\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tthis.props.getData(validWords);\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\t/** Randomize array in-place using Durstenfeld shuffle algorithm\r\n\t * @param {Array} array\r\n\t */\r\n\tshuffleArray = (array) => {\r\n\t\tfor (let i = array.length - 1; i > 0; i--) {\r\n\t\t\tconst j = Math.floor(Math.random() * (i + 1));\r\n\t\t\t[array[i], array[j]] = [array[j], array[i]];\r\n\t\t}\r\n\t};\r\n\r\n\t/** push the letter to the selectedLetters array in state\r\n\t * @param {String} letter - the letter to set\r\n\t */\r\n\tsetSelectedHandler = (letter) => {\r\n\t\tthis.setState((st) => {\r\n\t\t\tlet selectedLetters = [...st.selectedLetters];\r\n\t\t\tlet x = selectedLetters.findIndex((el) => el === '_');\r\n\t\t\tselectedLetters[x] = letter;\r\n\t\t\treturn { ...st, selectedLetters };\r\n\t\t});\r\n\t};\r\n\r\n\tcomponentDidUpdate = () => {\r\n\t\tif (this.props.seconds <= 1000 && !this.props.usedWords) {\r\n\t\t\tthis.props.setUsedWords(this.state.usedWords);\r\n\t\t}\r\n\t};\r\n\r\n\t/** Set the underscores in selectedLetters initially */\r\n\tsetUnderscores = () => {\r\n\t\tlet us = '';\r\n\t\tthis.state.jumbledWord.forEach((el) => {\r\n\t\t\tus += '_';\r\n\t\t});\r\n\t\tthis.setState({ selectedLetters: us.split(''), error: null });\r\n\t};\r\n\r\n\t/** helper function to remove the last entered letter in selectedLetters\r\n\t * @param {Function} callback - callback function to call after setting the state\r\n\t */\r\n\tbackSpace = (callback) => {\r\n\t\tthis.setState(\r\n\t\t\t(st) => {\r\n\t\t\t\tlet selectedLetters = [...st.selectedLetters];\r\n\t\t\t\tlet x = selectedLetters.findIndex((el) => el === '_');\r\n\t\t\t\tif (x === -1) {\r\n\t\t\t\t\tlet lastIndex = selectedLetters.length - 1;\r\n\t\t\t\t\tselectedLetters[lastIndex] = '_';\r\n\t\t\t\t} else {\r\n\t\t\t\t\tselectedLetters[x - 1] = '_';\r\n\t\t\t\t}\r\n\t\t\t\treturn { ...st, selectedLetters, error: null };\r\n\t\t\t},\r\n\t\t\t() => {\r\n\t\t\t\tcallback();\r\n\t\t\t}\r\n\t\t);\r\n\t};\r\n\r\n\t/** Check if the userWord is a valid word and add score\r\n\t * @param {Function} onClearHandler - function used to clear the input\r\n\t */\r\n\tonCheckHandler = (onClearHandler) => {\r\n\t\tlet userWord = this.state.selectedLetters.join('').split('_')[0];\r\n\t\tif (userWord.length <= 2) {\r\n\t\t\treturn this.setState({ error: \"Two letter words don't count\" });\r\n\t\t}\r\n\t\tuserWord = userWord.toLowerCase();\r\n\t\tif (\r\n\t\t\t// Object.keys(data).includes(userWord) &&\r\n\t\t\tthis.state.validWords.has(userWord) &&\r\n\t\t\t!this.state.usedWords.has(userWord)\r\n\t\t) {\r\n\t\t\t// set score\r\n\t\t\t// set errors to null\r\n\t\t\t// clear the input\r\n\t\t\t// add the word to the usedWords array\r\n\t\t\tthis.setState((st) => {\r\n\t\t\t\tlet len = userWord.length;\r\n\t\t\t\tlet score = this.props.score;\r\n\t\t\t\tif (len === 3) score += 5;\r\n\t\t\t\tif (len === 4) score += 10;\r\n\t\t\t\tif (len === 5) score += 20;\r\n\t\t\t\tif (len === 6) score += 50;\r\n\t\t\t\tif (len === 7) score += 75;\r\n\t\t\t\tif (len === 8) score += 100;\r\n\t\t\t\tif (len === 9) score += 150;\r\n\t\t\t\tif (len === 10) score += 200;\r\n\t\t\t\tlet usedWords = new Set(st.usedWords);\r\n\t\t\t\tusedWords.add(userWord);\r\n\t\t\t\tonClearHandler();\r\n\t\t\t\tthis.props.setScore(score);\r\n\t\t\t\treturn { ...st, error: null, usedWords };\r\n\t\t\t});\r\n\t\t} else if (this.state.usedWords.has(userWord)) {\r\n\t\t\tthis.setState({ error: 'We have been through this before' });\r\n\t\t} else {\r\n\t\t\tthis.setState({ error: 'Thats not english' });\r\n\t\t\treturn;\r\n\t\t}\r\n\t};\r\n\r\n\tcomponentDidMount = () => {\r\n\t\tthis.selectWord(this.props.wordLength);\r\n\t\t// jumble the selected word\r\n\t\t// this.jumbleWord(this.state.selectedWord);\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<header>\r\n\t\t\t\t\t<h1 className='text-center mb-4 font-sans text-6xl '>\r\n\t\t\t\t\t\tWorld of Words\r\n\t\t\t\t\t</h1>\r\n\t\t\t\t</header>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2 className='text-center font-mono text-2xl tracking-widest jumbled-words '>\r\n\t\t\t\t\t\t{this.state.jumbledWord.join('').toUpperCase()}\r\n\t\t\t\t\t</h2>\r\n\r\n\t\t\t\t\t{this.state.selectedWord ? (\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<Buttons\r\n\t\t\t\t\t\t\t\t// className='center'\r\n\t\t\t\t\t\t\t\tsetSelectedHandler={this.setSelectedHandler}\r\n\t\t\t\t\t\t\t\tjumbledWord={this.state.jumbledWord}\r\n\t\t\t\t\t\t\t\tjumbleWord={this.jumbleWord}\r\n\t\t\t\t\t\t\t\tselectedWord={this.state.selectedWord}\r\n\t\t\t\t\t\t\t\tbackSpace={this.backSpace}\r\n\t\t\t\t\t\t\t\tsetUnderscores={this.setUnderscores}\r\n\t\t\t\t\t\t\t\tonCheckHandler={this.onCheckHandler}\r\n\t\t\t\t\t\t\t\tselectedLetters={this.state.selectedLetters}\r\n\t\t\t\t\t\t\t\tletterCounts={this.state.letterCounts}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t) : null}\r\n\r\n\t\t\t\t\t{this.state.error ? (\r\n\t\t\t\t\t\t<p className=' m-4 text-lg text-center text-red-500'>\r\n\t\t\t\t\t\t\t{this.state.error}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t) : null}\r\n\r\n\t\t\t\t\t<WordTable usedWords={[...this.state.usedWords]} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Game;\r\n","import React, { Component } from 'react';\r\nimport '../styles/Modal.css';\r\nimport '../styles/app.css';\r\n\r\nexport class Modal extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div\r\n\t\t\t\tclassName='Modal border shadow-2xl border-blue-700 rounded-lg  '\r\n\t\t\t\tstyle={{ backgroundColor: '#1a202c' }}>\r\n\t\t\t\t{this.props.children}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Modal;\r\n","import React, { Component } from 'react';\r\n\r\nimport '../styles/BackDrop.css';\r\n\r\nexport class BackDrop extends Component {\r\n\trender() {\r\n\t\treturn <div onClick={this.props.onclick} className='BackDrop'></div>;\r\n\t}\r\n}\r\n\r\nexport default BackDrop;\r\n","import React, { Component } from 'react';\r\nimport Countdown from 'react-countdown';\r\n\r\nexport class Timer extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<Countdown\r\n\t\t\t\t\tautoStart={true}\r\n\t\t\t\t\tonTick={this.props.setTimeHandler}\r\n\t\t\t\t\tdate={Date.now() + this.props.seconds}\r\n\t\t\t\t\tonComplete={this.props.onTimerEndHandler}\r\n\t\t\t\t\trenderer={({ hours, minutes, seconds, completed }) => {\r\n\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t<span>\r\n\t\t\t\t\t\t\t\t0{minutes} : {seconds}\r\n\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t);\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Timer;\r\n","import React, { Component } from 'react';\r\nimport Game from './components/Game';\r\nimport Modal from './components/Modal';\r\nimport BackDrop from './components/BackDrop';\r\nimport Timer from './components/Timer';\r\nimport './styles/app.css';\r\n\r\nexport class App extends Component {\r\n\tstate = {\r\n\t\tscore: 0,\r\n\t\tkey: 1,\r\n\t\tseconds: 120000,\r\n\t\tkey1: 0,\r\n\t\tshowModal: false,\r\n\t\tlevel: 1,\r\n\t\twordLength: 6,\r\n\t\tscoreToBeat: 100,\r\n\t\tvalidWords: new Set(),\r\n\t\tusedWords: null,\r\n\t};\r\n\r\n\t/** Set the score state in the app component\r\n\t * @param {Number} score - score to add to the state\r\n\t */\r\n\tsetScore = (score) => {\r\n\t\tthis.setState({ score });\r\n\t};\r\n\r\n\t/** Rerender the game screen to rerender the timer and move to the next level */\r\n\trerenderGame = () => {\r\n\t\tthis.setState((st) => {\r\n\t\t\treturn {\r\n\t\t\t\t...st,\r\n\t\t\t\tkey: (st.key += 1),\r\n\t\t\t\tseconds: 120000,\r\n\t\t\t\tkey1: (st.key1 += 1),\r\n\t\t\t\tlevel: (st.level += 1),\r\n\t\t\t\tscoreToBeat: st.scoreToBeat + 50,\r\n\t\t\t\twordLength: (st.wordLength += 1),\r\n\t\t\t\tvalidWords: new Set(),\r\n\t\t\t\tusedWords: [],\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\t/** Function to remove the modal and start a new game */\r\n\tonContinueHandler = () => {\r\n\t\tthis.setState((st) => {\r\n\t\t\treturn {\r\n\t\t\t\t...st,\r\n\t\t\t\tkey: (st.key += 1),\r\n\t\t\t\tscore: 0,\r\n\t\t\t\tshowModal: false,\r\n\t\t\t\tseconds: 120000,\r\n\t\t\t\tkey1: (st.key1 += 1),\r\n\t\t\t\tlevel: 1,\r\n\t\t\t\tscoreToBeat: 100,\r\n\t\t\t\twordLength: 6,\r\n\t\t\t\tvalidWords: new Set(),\r\n\t\t\t\tusedWords: [],\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\t/** set the valid words in app\r\n\t * @param {Set} validWords - valid words\r\n\t */\r\n\tgetData = (validWords) => {\r\n\t\tthis.setState({\r\n\t\t\tvalidWords,\r\n\t\t});\r\n\t};\r\n\r\n\tsetUsedWords = (usedWords) => {\r\n\t\tthis.setState({ usedWords });\r\n\t};\r\n\r\n\t/** display the game over modal */\r\n\tdisplayModal = () => {\r\n\t\tconst gameoverString = 'GAME OVER';\r\n\r\n\t\tif (this.state.showModal) {\r\n\t\t\tlet words = [];\r\n\t\t\tthis.state.validWords.forEach((el) => {\r\n\t\t\t\tif (!this.state.usedWords.has(el)) {\r\n\t\t\t\t\twords.push(el);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\twords.sort((a, b) => b.length - a.length);\r\n\t\t\tconsole.log(words);\r\n\r\n\t\t\treturn (\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<Modal>\r\n\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t<h4 className='text-center font-bold text-2xl  '>\r\n\t\t\t\t\t\t\t\t{gameoverString}\r\n\t\t\t\t\t\t\t</h4>\r\n\t\t\t\t\t\t\t<p>You missed : </p>\r\n\t\t\t\t\t\t\t<ul className='list-none text-center '>\r\n\t\t\t\t\t\t\t\t{words.slice(0, 6).map((el, id) => {\r\n\t\t\t\t\t\t\t\t\treturn (\r\n\t\t\t\t\t\t\t\t\t\t<li\r\n\t\t\t\t\t\t\t\t\t\t\tclassName='border border-blue-700 my-2 rounded shadow-sm '\r\n\t\t\t\t\t\t\t\t\t\t\tkey={id}>\r\n\t\t\t\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\t\t\t\t{el.toUpperCase()}{' '}\r\n\t\t\t\t\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t\t\t\t);\r\n\t\t\t\t\t\t\t\t})}\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t<div className='flex justify-center'>\r\n\t\t\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\t\t\tclassName=' mt-2 border-2 border-blue-700  p-2 rounded px-6 hover:bg-blue-700 hover:border-white '\r\n\t\t\t\t\t\t\t\t\tonClick={this.onContinueHandler}>\r\n\t\t\t\t\t\t\t\t\tTry again\r\n\t\t\t\t\t\t\t\t</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Modal>\r\n\t\t\t\t\t<BackDrop onclick={this.onContinueHandler} />\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\t};\r\n\r\n\t/** Function that checks score and moves to next stage when timer ends */\r\n\tonTimerEndHandler = () => {\r\n\t\t// check if the score is > 100\r\n\t\tif (this.state.score >= this.state.scoreToBeat) {\r\n\t\t\t// keep current score and move on to next level\r\n\t\t\tthis.rerenderGame();\r\n\t\t} else {\r\n\t\t\t// show new game screen\r\n\t\t\tthis.setState({ showModal: true });\r\n\t\t}\r\n\t};\r\n\r\n\t/** maintain the time in local state.\r\n\t *  Called on each tick */\r\n\tsetTimeHandler = (data) => {\r\n\t\t// data.seconds\r\n\t\tthis.setState((st) => {\r\n\t\t\treturn {\r\n\t\t\t\tseconds: data.total,\r\n\t\t\t};\r\n\t\t});\r\n\t};\r\n\r\n\trender() {\r\n\t\tlet colour = ' text-red-500 ';\r\n\t\tif (this.state.score >= this.state.scoreToBeat) {\r\n\t\t\tcolour = 'text-green-500';\r\n\t\t}\r\n\t\treturn (\r\n\t\t\t<div className=' text-white'>\r\n\t\t\t\t<div className='container mx-auto px-2 mt-4  '>\r\n\t\t\t\t\t<div className='font-mono text-3xl w-full '>\r\n\t\t\t\t\t\t<div className='flex justify-between flex-wrap '>\r\n\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t{' '}\r\n\t\t\t\t\t\t\t\tscore :{' '}\r\n\t\t\t\t\t\t\t\t<span className={colour}>\r\n\t\t\t\t\t\t\t\t\t{this.state.score}\r\n\t\t\t\t\t\t\t\t</span>\r\n\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t<p>Level : {this.state.level}</p>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<Timer\r\n\t\t\t\t\t\t\t\t\tkey={this.state.key1}\r\n\t\t\t\t\t\t\t\t\tseconds={this.state.seconds}\r\n\t\t\t\t\t\t\t\t\tonTimerEndHandler={this.onTimerEndHandler}\r\n\t\t\t\t\t\t\t\t\tsetTimeHandler={this.setTimeHandler}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<Game\r\n\t\t\t\t\t\tlevel={this.state.level}\r\n\t\t\t\t\t\twordLength={this.state.wordLength}\r\n\t\t\t\t\t\tkey={this.state.key}\r\n\t\t\t\t\t\trerenderGame={this.rerenderGame}\r\n\t\t\t\t\t\tscore={this.state.score}\r\n\t\t\t\t\t\tsetScore={this.setScore}\r\n\t\t\t\t\t\tonContinueHandler={this.onContinueHandler}\r\n\t\t\t\t\t\tscoreToBeat={this.state.scoreToBeat}\r\n\t\t\t\t\t\tgetData={this.getData}\r\n\t\t\t\t\t\tseconds={this.state.seconds}\r\n\t\t\t\t\t\tsetUsedWords={this.setUsedWords}\r\n\t\t\t\t\t\tusedWords={this.state.usedWords}\r\n\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t{this.displayModal()}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}